generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  isAdmin     Boolean   @default(false)
  stores      Store[]   @relation("UserToStore")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// model Customer {
//   id          String    @id @default(uuid())
//   firstName   String
//   lastName    String
//   email       String    @unique
//   phone       String?   // Optional
//   address     String?   // Optional
//   orders      Order[]   @relation("CustomerToOrder") // One-to-many relationship
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }
model Customer {
  id          String    @id @default(uuid()) // Unique ID for the customer
  userId      String    @unique// Clerk user ID
  firstName   String    // First name of the customer
  lastName    String    // Last name of the customer
  email       String    @unique // Unique email address
  phone       String?   // Optional phone number
  streetAddress String? // Optional street address
  city        String?   // Optional city
  state       String?   // Optional state
  postalCode  String?   // Optional postal code
  country     String?   // Optional country
  orders      Order[]   @relation("CustomerToOrder") // One-to-many relationship with orders
  createdAt   DateTime  @default(now()) // Timestamp when the customer was created
  updatedAt   DateTime  @updatedAt // Timestamp when the customer was last updated
}

model Store {
  id          String      @id @default(uuid())
  name        String
  userId      String
  user        User        @relation("UserToStore", fields: [userId], references: [id])
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategory")
  sizes       Size[]      @relation("StoreToSize")
  color       Color[]     @relation("StoreToColor")        
  product     Product[]   @relation("StoreToProduct")    
  order       Order[]     @relation("StoreToOrder")    
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
}

model Billboard {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  description  String
  imageUrl  String
  categories Category[] @relation("BillboardToCategory")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id           String      @id @default(uuid())
  storeId      String
  store        Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId  String
  billboard    Billboard   @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products     Product[]   @relation("CategoryToProduct")
  name         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  product   Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  product   Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id          String   @id @default(uuid())
  storeId     String
  store       Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String?  // Optional description field
  subLabel    String?  // Optional subLabel field
  price       Decimal
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  sizeId      String
  size        Size     @relation(fields: [sizeId], references: [id])
  colorId     String?  // Make colorId optional
  color       Color?   @relation(fields: [colorId], references: [id]) // Make color optional
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}


model Image {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Order {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  customerId  String
  customer    Customer  @relation("CustomerToOrder", fields: [customerId], references: [id]) // Many-to-one relationship
  orderItems  OrderItem[]
  isPaid      Boolean   @default(false)
  totalAmount Decimal   @default(0.0) // Total amount for the order
  phone       String?   // Optional, redundant if stored in Customer
  address     String?   // Optional, redundant if stored in Customer
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([customerId])
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
}
